{"version":3,"sources":["node_modules/browser-pack/_prelude.js","index.min.js","frontend/source/js/tests/index.js","frontend/source/js/tests/upload_tests.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","./upload_tests","2","_typeof","Symbol","iterator","obj","constructor","QUnit","$","advancedTest","name","cb","support","advancedUpload","test","assert","upload","UPLOAD_HTML","appendTo","document","body","input","uploadify","find","skip","afterEach","remove","equal","attr","ok","hasClass","hasAttribute","strictEqual","data","isDegraded","file","badFakeFile","type","evt","jQuery","Event","originalEvent","dataTransfer","files","trigger","goodFileMime","mimeDropEvt","goodFileExt","extDropEvt","fakeFile","on","text","_i"],"mappings":"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","file":"index.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nrequire('./upload_tests');\n\n},{\"./upload_tests\":2}],2:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n/* global QUnit jQuery document test */\n(function uploadTests(QUnit, $) {\n  var UPLOAD_HTML = '<div class=\"upload\">' + '<input type=\"file\" name=\"file\" id=\"file\" accept=\".csv, application/test\">' + '<div class=\"upload-chooser\">' + '<label for=\"file\">Choose file or drag and drop here</label>' + '</div>' + '</div>';\n\n  var upload = void 0;\n  var input = void 0;\n\n  function advancedTest(name, cb) {\n    if (!$.support.advancedUpload) {\n      return QUnit.skip(name, cb);\n    }\n    return QUnit.test(name, function (assert) {\n      upload = $(UPLOAD_HTML).appendTo(document.body);\n      input = upload.uploadify().find('input');\n      return cb(assert);\n    });\n  }\n\n  QUnit.module('upload', {\n    afterEach: function afterEach() {\n      if (upload) {\n        upload.remove();\n      }\n      upload = null;\n      input = null;\n    }\n  });\n\n  test('$.support.advancedUpload is a boolean', function (assert) {\n    assert.equal(_typeof($.support.advancedUpload), 'boolean');\n  });\n\n  test('degraded upload sets \"upload\" data', function (assert) {\n    upload = $(UPLOAD_HTML).attr('data-force-degradation', 'yup').appendTo(document.body);\n    input = upload.uploadify().find('input');\n\n    assert.ok(upload.hasClass('degraded'));\n    assert.ok(!upload[0].hasAttribute('aria-live'));\n    assert.strictEqual(input.data('upload').isDegraded, true);\n    assert.strictEqual(input.data('upload').input, input[0]);\n    assert.strictEqual(input.data('upload').file, null);\n  });\n\n  advancedTest('extra calls to uploadify() do nothing', function (assert) {\n    var data = input.data('upload');\n    upload.uploadify();\n    assert.strictEqual(input.data('upload'), data);\n  });\n\n  advancedTest('advanced upload sets aria-live', function (assert) {\n    assert.equal(upload.attr('aria-live'), 'polite');\n  });\n\n  advancedTest('advanced upload sets \"upload\" data', function (assert) {\n    assert.strictEqual(input.data('upload').isDegraded, false);\n    assert.strictEqual(input.data('upload').input, input[0]);\n    assert.strictEqual(input.data('upload').file, null);\n  });\n\n  advancedTest('advanced upload does not allow non-accepted file types', function (assert) {\n    var badFakeFile = { name: 'boop', type: 'application/badtest' };\n    var evt = jQuery.Event('drop', { // eslint-disable-line new-cap\n      originalEvent: { dataTransfer: { files: [badFakeFile] } }\n    });\n\n    upload.trigger(evt);\n    assert.strictEqual(input.data('upload').file, null);\n    assert.ok(upload.find('.upload-error').length);\n  });\n\n  advancedTest('advanced upload allows accepted file types', function (assert) {\n    var goodFileMime = { name: 'boop', type: 'application/test' };\n    var mimeDropEvt = jQuery.Event('drop', { // eslint-disable-line new-cap\n      originalEvent: { dataTransfer: { files: [goodFileMime] } }\n    });\n\n    upload.trigger(mimeDropEvt);\n    assert.strictEqual(input.data('upload').file, goodFileMime);\n\n    var goodFileExt = { name: 'boop.csv', type: 'whatever' };\n    var extDropEvt = jQuery.Event('drop', { // eslint-disable-line new-cap\n      originalEvent: { dataTransfer: { files: [goodFileExt] } }\n    });\n    upload.trigger(extDropEvt);\n    assert.strictEqual(input.data('upload').file, goodFileExt);\n  });\n\n  advancedTest('advanced upload allows any file when \"accept\" not specified', function (assert) {\n    input.attr('accept', null);\n    var fakeFile = { name: 'boop' };\n    var evt = jQuery.Event('drop', { // eslint-disable-line new-cap\n      originalEvent: { dataTransfer: { files: [fakeFile] } }\n    });\n    upload.trigger(evt);\n    assert.strictEqual(input.data('upload').file, fakeFile);\n  });\n\n  advancedTest('\"changefile\" event triggered on drop', function (assert) {\n    var fakeFile = { name: 'boop', type: 'application/test' };\n    var evt = jQuery.Event('drop', { // eslint-disable-line new-cap\n      originalEvent: { dataTransfer: { files: [fakeFile] } }\n    });\n\n    upload.on('changefile', function (e, file) {\n      assert.strictEqual(file, fakeFile);\n    });\n    upload.trigger(evt);\n  });\n\n  advancedTest('input \"change\" evt w/o files does nothing', function (assert) {\n    input.trigger('change');\n    assert.strictEqual(input.data('upload').file, null);\n  });\n\n  advancedTest('\"changefile\" sets current file', function (assert) {\n    var fakeFile = { name: 'foo.txt', type: 'application/test' };\n    input.trigger('changefile', fakeFile);\n\n    assert.strictEqual(input.data('upload').file, fakeFile);\n    assert.equal(upload.find('.upload-filename').text(), 'foo.txt');\n  });\n\n  advancedTest('dragenter/dragleave affect .dragged-over', function (assert) {\n    assert.ok(!upload.hasClass('dragged-over'));\n\n    for (var i = 0; i < 3; i++) {\n      upload.trigger('dragenter');\n      assert.ok(upload.hasClass('dragged-over'));\n    }\n\n    for (var _i = 0; _i < 2; _i++) {\n      upload.trigger('dragleave');\n      assert.ok(upload.hasClass('dragged-over'));\n    }\n\n    upload.trigger('dragleave');\n    assert.ok(!upload.hasClass('dragged-over'));\n  });\n})(QUnit, jQuery);\n\n},{}]},{},[1])\n\n","\nrequire('./upload_tests');\n","/* global QUnit jQuery document test */\n(function uploadTests(QUnit, $) {\n  const UPLOAD_HTML = (\n    '<div class=\"upload\">' +\n    '<input type=\"file\" name=\"file\" id=\"file\" accept=\".csv, application/test\">' +\n    '<div class=\"upload-chooser\">' +\n    '<label for=\"file\">Choose file or drag and drop here</label>' +\n    '</div>' +\n    '</div>'\n  );\n\n  let upload;\n  let input;\n\n  function advancedTest(name, cb) {\n    if (!$.support.advancedUpload) {\n      return QUnit.skip(name, cb);\n    }\n    return QUnit.test(name, (assert) => {\n      upload = $(UPLOAD_HTML).appendTo(document.body);\n      input = upload.uploadify().find('input');\n      return cb(assert);\n    });\n  }\n\n  QUnit.module('upload', {\n    afterEach() {\n      if (upload) {\n        upload.remove();\n      }\n      upload = null;\n      input = null;\n    },\n  });\n\n  test('$.support.advancedUpload is a boolean', (assert) => {\n    assert.equal(typeof($.support.advancedUpload), 'boolean');\n  });\n\n  test('degraded upload sets \"upload\" data', (assert) => {\n    upload = $(UPLOAD_HTML)\n      .attr('data-force-degradation', 'yup')\n      .appendTo(document.body);\n    input = upload.uploadify().find('input');\n\n    assert.ok(upload.hasClass('degraded'));\n    assert.ok(!upload[0].hasAttribute('aria-live'));\n    assert.strictEqual(input.data('upload').isDegraded, true);\n    assert.strictEqual(input.data('upload').input, input[0]);\n    assert.strictEqual(input.data('upload').file, null);\n  });\n\n  advancedTest('extra calls to uploadify() do nothing', (assert) => {\n    const data = input.data('upload');\n    upload.uploadify();\n    assert.strictEqual(input.data('upload'), data);\n  });\n\n  advancedTest('advanced upload sets aria-live', (assert) => {\n    assert.equal(upload.attr('aria-live'), 'polite');\n  });\n\n  advancedTest('advanced upload sets \"upload\" data', (assert) => {\n    assert.strictEqual(input.data('upload').isDegraded, false);\n    assert.strictEqual(input.data('upload').input, input[0]);\n    assert.strictEqual(input.data('upload').file, null);\n  });\n\n  advancedTest('advanced upload does not allow non-accepted file types', (assert) => {\n    const badFakeFile = { name: 'boop', type: 'application/badtest' };\n    const evt = jQuery.Event('drop', { // eslint-disable-line new-cap\n      originalEvent: { dataTransfer: { files: [badFakeFile] } },\n    });\n\n    upload.trigger(evt);\n    assert.strictEqual(input.data('upload').file, null);\n    assert.ok(upload.find('.upload-error').length);\n  });\n\n  advancedTest('advanced upload allows accepted file types', (assert) => {\n    const goodFileMime = { name: 'boop', type: 'application/test' };\n    const mimeDropEvt = jQuery.Event('drop', { // eslint-disable-line new-cap\n      originalEvent: { dataTransfer: { files: [goodFileMime] } },\n    });\n\n    upload.trigger(mimeDropEvt);\n    assert.strictEqual(input.data('upload').file, goodFileMime);\n\n    const goodFileExt = { name: 'boop.csv', type: 'whatever' };\n    const extDropEvt = jQuery.Event('drop', { // eslint-disable-line new-cap\n      originalEvent: { dataTransfer: { files: [goodFileExt] } },\n    });\n    upload.trigger(extDropEvt);\n    assert.strictEqual(input.data('upload').file, goodFileExt);\n  });\n\n  advancedTest('advanced upload allows any file when \"accept\" not specified', (assert) => {\n    input.attr('accept', null);\n    const fakeFile = { name: 'boop' };\n    const evt = jQuery.Event('drop', { // eslint-disable-line new-cap\n      originalEvent: { dataTransfer: { files: [fakeFile] } },\n    });\n    upload.trigger(evt);\n    assert.strictEqual(input.data('upload').file, fakeFile);\n  });\n\n  advancedTest('\"changefile\" event triggered on drop', (assert) => {\n    const fakeFile = { name: 'boop', type: 'application/test' };\n    const evt = jQuery.Event('drop', { // eslint-disable-line new-cap\n      originalEvent: { dataTransfer: { files: [fakeFile] } },\n    });\n\n    upload.on('changefile', (e, file) => {\n      assert.strictEqual(file, fakeFile);\n    });\n    upload.trigger(evt);\n  });\n\n  advancedTest('input \"change\" evt w/o files does nothing', (assert) => {\n    input.trigger('change');\n    assert.strictEqual(input.data('upload').file, null);\n  });\n\n  advancedTest('\"changefile\" sets current file', (assert) => {\n    const fakeFile = { name: 'foo.txt', type: 'application/test' };\n    input.trigger('changefile', fakeFile);\n\n    assert.strictEqual(input.data('upload').file, fakeFile);\n    assert.equal(upload.find('.upload-filename').text(), 'foo.txt');\n  });\n\n  advancedTest('dragenter/dragleave affect .dragged-over', (assert) => {\n    assert.ok(!upload.hasClass('dragged-over'));\n\n    for (let i = 0; i < 3; i++) {\n      upload.trigger('dragenter');\n      assert.ok(upload.hasClass('dragged-over'));\n    }\n\n    for (let i = 0; i < 2; i++) {\n      upload.trigger('dragleave');\n      assert.ok(upload.hasClass('dragged-over'));\n    }\n\n    upload.trigger('dragleave');\n    assert.ok(!upload.hasClass('dragged-over'));\n  });\n}(QUnit, jQuery));\n"],"sourceRoot":"/source/"}